-# coding: utf-8
- id=article.id
- top_post = article.top_post
- group = @group || article.group
- group_id = article.group_id

%article.cf.hentry[article]
  - if top_post
    %div[article.top_post]
      %h2.entry-title= link_to article_title(article), [group, article], :rel => 'bookmark'
      .entry-content
        - if article.top_post && article.top_post.is_a?(Picture)
          = link_to [group, article] do
            = image_tag article.top_post.picture.thumb.url
      %ul.meta.cf
        -#
          - if logged_in?
            %li.subscribe-button
              - if current_user.has_subscribed?(article)
                = link_to unsubscribe_article_path(group, article), :class => 'unsubscribe' do
                  = typicon('eye')
                  = t('articles.unsubscribe')
              - else
                = link_to subscribe_article_path(group, article), :class => 'subscribe' do
                  = typicon('eye-outline')
                  = t('articles.subscribe')

        %li.comment-status
          - if article.comment_status == 'closed'
            %span.comment_head
              禁止评论
          - else
            %a{:class=>"comments #{@list_view? "list_view" :  ""}",
              :href=> group_article_path(article.group, article, :anchor => "comments_#{article.id}"),
              :id=>"c-#{article.id}"}
              = typicon 'messages'
              = article.comments.size > 0 ? "#{article.comments.size}条评论" : "暂无评论"
        %li.post-signature
          .user-info
            - unless article.anonymous
              - user = article.user
              - if user
                .user-avatar= image_tag user.avatar.url("thumb"), :alt => "#{user.name_or_login}", :class => 'avatar'
                .user-details
                  = link_to user.name_or_login, user, :title => "@#{user.login}",:class => 'user', :data => {:login => user.login} #user_detail_for(user)

            .user-action-time
              - if top_post and top_post.is_a?(Repost)
                转发于
              - else
                发布于
              = link_to group.name, group_articles_path(group),:data => {:alias => group.alias},:class => 'group'
              = link_to [group,article], :rel => 'permalink' do
                %time.relativetime{:datetime => article.created_at, :title => article.created_at.to_s}= time_ago_in_words(article.created_at)
  - if defined?(comments) and not comments.blank?
    - @comments = comments
    = render 'comments/index'
