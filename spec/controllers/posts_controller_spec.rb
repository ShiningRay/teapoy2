require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe PostsController, type: :controller do
  let(:group) { create :group }
  let(:topic) { create :topic, group: group }

  # describe 'GET #index' do
  #   before do
  #      @posts = create_list :post, 3, topic: topic
  #   end
  #   it 'returns posts' do
  #     get :index, topic_id: topic.id, group_id: group.id

  #     expect(assigns(:posts)).to match(@posts)
  #   end
  # end

  describe 'POST #create' do
    context 'when user logged in' do
      before do
        login_user
      end

      it 'creates post' do
        expect{
          post :create, post: { content: 'testtest' }, topic_id: topic.id, group_id: group.id
        }.to change{topic.posts.count}

      end
      it 'increments posts floor' do
        post :create, post: { content: 'testtest' }, topic_id: topic.id, group_id: group.id
        expect(assigns(:post).floor).to eq(1)
      end
    end
  end

  describe 'POST #up' do
    context 'when user logged in' do
      before do
        login_user
        @topic = create :topic
      end

      it 'increments pos score' do
        expect{
          post :up, id: topic.top_post.id
        }.to change{ Rating.count }
        expect(topic.top_post.reload.pos).to eq(1)
      end
    end
  end

  describe 'POST #dn' do
    context 'when user logged in' do
      before do
        login_user
        @topic = create :topic
      end

      it 'increments neg score' do
        expect {
          post :dn, id: topic.top_post.id
        }.to change(Rating, :count)
        expect(topic.top_post.reload.neg).to eq(1)
      end
    end
  end

end
