require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe Topics::TitlesController, type: :controller do
  let(:topic) {
    create :topic
  }

  describe "PUT #update" do
    context 'when author logged_in' do
      before do
        login_user topic.user
      end
      it 'updates title' do
        put :update, {value: 'new title', pk: topic.id, group_id: topic.group_id, topic_id: topic.id}
        topic.reload
        expect(topic.title).to eq('new title')
      end
    end
    context 'when current logged_in user is not author' do
      it 'does not update title' do
        put :update, {value: 'new title', pk: topic.id, group_id: topic.group_id, topic_id: topic.id}
        topic.reload
        expect(topic.title).not_to eq('new title')
      end
    end
  end
end
