require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe LikersController, type: :controller do
  let(:story) { create :story }
  let(:guestbook) { story.guestbook }
  let(:author) { story.author }

  describe 'GET #index' do
    before do
      @likes = create_list :like, 10, story: story
      # story.likers
      get :index, guestbook_id: guestbook.id, story_id: story.id
    end
    subject { assigns(:likers) }
    its(:size){ should == 10 }
    it { should match( @likes.map(&:user)) }
  end

  describe 'POST #create' do
    let(:liker){create :active_user}

    it 'likes story' do
      expect{
        post :create, liker:{user_id: liker.id}, guestbook_id: guestbook.id, story_id: story.id
      }.to change{story.likers.count}
    end
  end

  describe 'DELETE #destroy' do
    before {
      @like = create :like, story: story
    }
    it 'removes liker' do
      expect {
        delete :destroy, id: @like.user_id, guestbook_id: guestbook.id, story_id: story.id
      }.to change{ story.likers.count }.by(-1)
    end
  end

  # # This should return the minimal set of attributes required to create a valid
  # # Liker. As you add validations to Liker, be sure to
  # # adjust the attributes here as well.
  # let(:valid_attributes) {
  #   skip("Add a hash of attributes valid for your model")
  # }

  # let(:invalid_attributes) {
  #   skip("Add a hash of attributes invalid for your model")
  # }

  # # This should return the minimal set of values that should be in the session
  # # in order to pass any filters (e.g. authentication) defined in
  # # LikersController. Be sure to keep this updated too.
  # let(:valid_session) { {} }

  # describe "GET #index" do
  #   it "assigns all likers as @likers" do
  #     liker = Liker.create! valid_attributes
  #     get :index, {}, valid_session
  #     expect(assigns(:likers)).to eq([liker])
  #   end
  # end

  # describe "GET #show" do
  #   it "assigns the requested liker as @liker" do
  #     liker = Liker.create! valid_attributes
  #     get :show, {:id => liker.to_param}, valid_session
  #     expect(assigns(:liker)).to eq(liker)
  #   end
  # end

  # describe "GET #new" do
  #   it "assigns a new liker as @liker" do
  #     get :new, {}, valid_session
  #     expect(assigns(:liker)).to be_a_new(Liker)
  #   end
  # end

  # describe "GET #edit" do
  #   it "assigns the requested liker as @liker" do
  #     liker = Liker.create! valid_attributes
  #     get :edit, {:id => liker.to_param}, valid_session
  #     expect(assigns(:liker)).to eq(liker)
  #   end
  # end

  # describe "POST #create" do
  #   context "with valid params" do
  #     it "creates a new Liker" do
  #       expect {
  #         post :create, {:liker => valid_attributes}, valid_session
  #       }.to change(Liker, :count).by(1)
  #     end

  #     it "assigns a newly created liker as @liker" do
  #       post :create, {:liker => valid_attributes}, valid_session
  #       expect(assigns(:liker)).to be_a(Liker)
  #       expect(assigns(:liker)).to be_persisted
  #     end

  #     it "redirects to the created liker" do
  #       post :create, {:liker => valid_attributes}, valid_session
  #       expect(response).to redirect_to(Liker.last)
  #     end
  #   end

  #   context "with invalid params" do
  #     it "assigns a newly created but unsaved liker as @liker" do
  #       post :create, {:liker => invalid_attributes}, valid_session
  #       expect(assigns(:liker)).to be_a_new(Liker)
  #     end

  #     it "re-renders the 'new' template" do
  #       post :create, {:liker => invalid_attributes}, valid_session
  #       expect(response).to render_template("new")
  #     end
  #   end
  # end

  # describe "PUT #update" do
  #   context "with valid params" do
  #     let(:new_attributes) {
  #       skip("Add a hash of attributes valid for your model")
  #     }

  #     it "updates the requested liker" do
  #       liker = Liker.create! valid_attributes
  #       put :update, {:id => liker.to_param, :liker => new_attributes}, valid_session
  #       liker.reload
  #       skip("Add assertions for updated state")
  #     end

  #     it "assigns the requested liker as @liker" do
  #       liker = Liker.create! valid_attributes
  #       put :update, {:id => liker.to_param, :liker => valid_attributes}, valid_session
  #       expect(assigns(:liker)).to eq(liker)
  #     end

  #     it "redirects to the liker" do
  #       liker = Liker.create! valid_attributes
  #       put :update, {:id => liker.to_param, :liker => valid_attributes}, valid_session
  #       expect(response).to redirect_to(liker)
  #     end
  #   end

  #   context "with invalid params" do
  #     it "assigns the liker as @liker" do
  #       liker = Liker.create! valid_attributes
  #       put :update, {:id => liker.to_param, :liker => invalid_attributes}, valid_session
  #       expect(assigns(:liker)).to eq(liker)
  #     end

  #     it "re-renders the 'edit' template" do
  #       liker = Liker.create! valid_attributes
  #       put :update, {:id => liker.to_param, :liker => invalid_attributes}, valid_session
  #       expect(response).to render_template("edit")
  #     end
  #   end
  # end

  # describe "DELETE #destroy" do
  #   it "destroys the requested liker" do
  #     liker = Liker.create! valid_attributes
  #     expect {
  #       delete :destroy, {:id => liker.to_param}, valid_session
  #     }.to change(Liker, :count).by(-1)
  #   end

  #   it "redirects to the likers list" do
  #     liker = Liker.create! valid_attributes
  #     delete :destroy, {:id => liker.to_param}, valid_session
  #     expect(response).to redirect_to(likers_url)
  #   end
  # end

end
