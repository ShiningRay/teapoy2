require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe StoryCommentsController, type: :controller do
  let(:story) { create :story }
  let(:guestbook) { story.guestbook }

  describe 'GET #index' do
    before {
      @comments = create_list :story_comment, 10, story: story
      get :index, story_id: story.id, guestbook_id: guestbook.id, format: :json
    }
    subject { assigns(:story_comments) }
    it { should match(@comments) }
  end

  describe 'POST #create' do
    context 'when user logged in' do
      before {
        login_user
      }

      it 'creates new comment' do
        expect {
          post :create, story_comment: { content: 'testtset' }, story_id: story.id, guestbook_id: guestbook.id
        }.to change{ story.comments.count }
      end
    end
  end

  describe 'DELETE #destroy' do
    context 'user logged in' do
      before { login_user }
      let!(:comment) { create :story_comment, story: story, author: current_user }

      it 'deletes comment' do
        expect {
          delete :destroy, id: comment.id, story_id: story.id, guestbook_id: guestbook.id
        }.to change{ story.comments.count }.by(-1)
      end
    end

    context 'user not logged in' do
      let!(:comment) { create :story_comment, story: story }

      it 'do not delete comment' do
        expect {
          delete :destroy, id: comment.id, story_id: story.id, guestbook_id: guestbook.id
        }.not_to change{ story.comments.count }
      end
    end
  end

end
